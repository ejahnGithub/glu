#if !defined(BUILTINS_KIND)
    #define BUILTINS_KIND(ID)
#endif // BUILTINS_KIND

#if !defined(BUILTIN_BINARY_OP)
    #define BUILTIN_BINARY_OP(ID, NAME, RET, ARG1, ARG2) BUILTINS_KIND(ID)
#endif // BUILTIN_BINARY_OP

#if !defined(BUILTIN_UNARY_OP)
    #define BUILTIN_UNARY_OP(ID, NAME, RET, ARG) BUILTINS_KIND(ID)
#endif // BUILTIN_UNARY_OP

// Binary Builtins functions definitions work as follows:
// BUILTIN_BINARY_OP(ID, NAME, RET, ARG1, ARG2)
// ID: The enum identifier for the builtin function.
// NAME: The name of the builtin function.
// RET: The return type of the builtin function.
// ARG1: The type of the first argument.
// ARG2: The type of the second argument.

// Macro to define all binary operations for a given type
#define EQUALITY_OPS(PREFIX, TYPE_EXPR)                            \
    BUILTIN_BINARY_OP(                                             \
        Eq##PREFIX, "builtin_eq", TYPE(Bool), TYPE_EXPR, TYPE_EXPR \
    )

#define ARITHMETIC_OPS(PREFIX, TYPE_EXPR)                           \
    BUILTIN_BINARY_OP(                                              \
        Add##PREFIX, "builtin_add", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR \
    )                                                               \
    BUILTIN_BINARY_OP(                                              \
        Sub##PREFIX, "builtin_sub", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR \
    )                                                               \
    BUILTIN_BINARY_OP(                                              \
        Mul##PREFIX, "builtin_mul", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR \
    )                                                               \
    BUILTIN_BINARY_OP(                                              \
        Div##PREFIX, "builtin_div", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR \
    )

#define BITWISE_OPS(PREFIX, TYPE_EXPR)                                     \
    BUILTIN_BINARY_OP(                                                     \
        And##PREFIX, "builtin_and", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR        \
    )                                                                      \
    BUILTIN_BINARY_OP(                                                     \
        Or##PREFIX, "builtin_or", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR          \
    )                                                                      \
    BUILTIN_BINARY_OP(                                                     \
        Xor##PREFIX, "builtin_xor", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR        \
    )                                                                      \
    BUILTIN_BINARY_OP(                                                     \
        Shl##PREFIX, "builtin_shl", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR        \
    )                                                                      \
    BUILTIN_BINARY_OP(                                                     \
        Shr##PREFIX, "builtin_shr", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR        \
    )                                                                      \
    BUILTIN_UNARY_OP(Compl##PREFIX, "builtin_compl", TYPE_EXPR, TYPE_EXPR) \
    BUILTIN_BINARY_OP(                                              \
        Mod##PREFIX, "builtin_mod", TYPE_EXPR, TYPE_EXPR, TYPE_EXPR \
    )

#define INT_TYPE(NAME, SIGNEDNESS, BITS)                     \
    ARITHMETIC_OPS(NAME, TYPE(Int, IntTy::SIGNEDNESS, BITS)) \
    BITWISE_OPS(NAME, TYPE(Int, IntTy::SIGNEDNESS, BITS))    \
    EQUALITY_OPS(NAME, TYPE(Int, IntTy::SIGNEDNESS, BITS))

#define FLOAT_TYPE(NAME, BITS)              \
    ARITHMETIC_OPS(NAME, TYPE(Float, BITS)) \
    EQUALITY_OPS(NAME, TYPE(Float, BITS))

// Generate all binary operations for signed integers
INT_TYPE(Int8, Signed, 8)
INT_TYPE(Int16, Signed, 16)
INT_TYPE(Int32, Signed, 32)
INT_TYPE(Int64, Signed, 64)
INT_TYPE(Int128, Signed, 128)

// Generate all binary operations for unsigned integers
INT_TYPE(UInt8, Unsigned, 8)
INT_TYPE(UInt16, Unsigned, 16)
INT_TYPE(UInt32, Unsigned, 32)
INT_TYPE(UInt64, Unsigned, 64)
INT_TYPE(UInt128, Unsigned, 128)

// Generate all binary operations for floating point types
FLOAT_TYPE(Float16, 16)
FLOAT_TYPE(Float32, 32)
FLOAT_TYPE(Float64, 64)
FLOAT_TYPE(Float80, 80)
// FLOAT_TYPE(Float128, 128)

// Eq operation for boolean type
EQUALITY_OPS(Bool, TYPE(Bool))

// Clean up helper macros
#undef INT_TYPE
#undef FLOAT_TYPE

#undef ARITHMETIC_OPS
#undef EQUALITY_OPS

#undef BUILTIN_BINARY_OP
#undef BUILTINS_KIND
