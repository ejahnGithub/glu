
#define EQUALITY_OPERATORS(Type) \
    public func ==(a: Type, b: Type) -> Bool { \
        return builtins::builtin_eq(a, b); \
    } \
    public func !=(a: Type, b: Type) -> Bool { \
        return !builtins::builtin_eq(a, b); \
    }

#define ARITHMETIC_OPERATORS(Type) \
    public func +(a: Type, b: Type) -> Type { \
        return builtins::builtin_add(a, b); \
    } \
    public func -(a: Type, b: Type) -> Type { \
        return builtins::builtin_sub(a, b); \
    } \
    public func *(a: Type, b: Type) -> Type { \
        return builtins::builtin_mul(a, b); \
    } \
    public func /(a: Type, b: Type) -> Type { \
        return builtins::builtin_div(a, b); \
    } \
    EQUALITY_OPERATORS(Type)

ARITHMETIC_OPERATORS(Int8)
ARITHMETIC_OPERATORS(Int16)
ARITHMETIC_OPERATORS(Int32)
ARITHMETIC_OPERATORS(Int64)
ARITHMETIC_OPERATORS(UInt8)
ARITHMETIC_OPERATORS(UInt16)
ARITHMETIC_OPERATORS(UInt32)
ARITHMETIC_OPERATORS(UInt64)
ARITHMETIC_OPERATORS(Float16)
ARITHMETIC_OPERATORS(Float32)
ARITHMETIC_OPERATORS(Float64)
EQUALITY_OPERATORS(Bool)

public func !(a: Bool) -> Bool {
    return a == false;
}
