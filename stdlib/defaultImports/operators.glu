
#define EQUALITY_OPERATORS(Type) \
    @inline public func ==(a: Type, b: Type) -> Bool { \
        return builtins::builtin_eq(a, b); \
    } \
    @inline public func !=(a: Type, b: Type) -> Bool { \
        return !builtins::builtin_eq(a, b); \
    }

#define COMPARISON_OPERATORS(Type) \
    EQUALITY_OPERATORS(Type) \
    @inline public func <(a: Type, b: Type) -> Bool { \
        return builtins::builtin_lt(a, b); \
    } \
    @inline public func <=(a: Type, b: Type) -> Bool { \
        return builtins::builtin_le(a, b); \
    } \
    @inline public func >(a: Type, b: Type) -> Bool { \
        return builtins::builtin_gt(a, b); \
    } \
    @inline public func >=(a: Type, b: Type) -> Bool { \
        return builtins::builtin_ge(a, b); \
    }

#define ARITHMETIC_OPERATORS(Type) \
    @inline public func +(a: Type, b: Type) -> Type { \
        return builtins::builtin_add(a, b); \
    } \
    @inline public func -(a: Type, b: Type) -> Type { \
        return builtins::builtin_sub(a, b); \
    } \
    @inline public func *(a: Type, b: Type) -> Type { \
        return builtins::builtin_mul(a, b); \
    } \
    @inline public func /(a: Type, b: Type) -> Type { \
        return builtins::builtin_div(a, b); \
    } \
    @inline public func -(a: Type) -> Type { \
        return 0 - a; \
    } \
    @inline public func +(a: Type) -> Type { \
        return a; \
    } \
    COMPARISON_OPERATORS(Type)

#define BITWISE_OPERATORS(Type) \
    @inline public func &(a: Type, b: Type) -> Type { \
        return builtins::builtin_and(a, b); \
    } \
    @inline public func |(a: Type, b: Type) -> Type { \
        return builtins::builtin_or(a, b); \
    } \
    @inline public func ^(a: Type, b: Type) -> Type { \
        return builtins::builtin_xor(a, b); \
    } \
    @inline public func <<(a: Type, b: Type) -> Type { \
        return builtins::builtin_shl(a, b); \
    } \
    @inline public func >>(a: Type, b: Type) -> Type { \
        return builtins::builtin_shr(a, b); \
    } \
    @inline public func ~(a: Type) -> Type { \
        return builtins::builtin_compl(a); \
    } \
    @inline public func %(a: Type, b: Type) -> Type { \
        return builtins::builtin_mod(a, b); \
    } \
    ARITHMETIC_OPERATORS(Type)

BITWISE_OPERATORS(Int8)
BITWISE_OPERATORS(Int16)
BITWISE_OPERATORS(Int32)
BITWISE_OPERATORS(Int64)
BITWISE_OPERATORS(UInt8)
BITWISE_OPERATORS(UInt16)
BITWISE_OPERATORS(UInt32)
BITWISE_OPERATORS(UInt64)
ARITHMETIC_OPERATORS(Float16)
ARITHMETIC_OPERATORS(Float32)
ARITHMETIC_OPERATORS(Float64)
EQUALITY_OPERATORS(Bool)

@inline public func !(a: Bool) -> Bool {
    return a == false;
}
