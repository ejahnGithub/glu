//
// RUN: gluc %s -o %t && %t | FileCheck -v %s
//

import io::{print, printLine};
import string::*;

func intToStr(i: Int) -> String {
    if i == 0 { return "0"; }
    if i == 1 { return "1"; }
    if i == 2 { return "2"; }
    if i == 3 { return "3"; }
    if i == 4 { return "4"; }
    if i == 5 { return "5"; }
    if i == 6 { return "6"; }
    if i == 7 { return "7"; }
    if i == 8 { return "8"; }
    if i == 9 { return "9"; }
    return "<int>";
}

func printInt(i: Int) {
    printLine(intToStr(i));
}

func printBool(b: Bool) {
	if b {
		printLine("true");
	} else {
		printLine("false");
	}
}

func main() -> Int {
	let a: Int = 4;
	let b: Int = 1;

	let sum = a + b;
	// CHECK: sum: 5
	print("sum: ");
	printInt(sum);

	let diff = a - b;
	// CHECK: diff: 3
	print("diff: ");
	printInt(diff);

	let div = a / b;
	// CHECK: div: 4
	print("div: ");
	printInt(div);

	let mod = a % b;
	// CHECK: mod: 0
	print("mod: ");
	printInt(mod);

	let mod2 = b % a;
	// CHECK: mod: 1
	print("mod: ");
	printInt(mod2);

	let eq1 = a == b;
	// CHECK: eq1: false
	print("eq1: ");
	printBool(eq1);
	let eq2 = a == a;
	// CHECK: eq2: true
	print("eq2: ");
	printBool(eq2);

	let neq1 = a != b;
	// CHECK: neq1: true
	print("neq1: ");
	printBool(neq1);
	let neq2 = a != a;
	// CHECK: neq2: false
	print("neq2: ");
	printBool(neq2);

	let lt1 = a < b;
	// CHECK: lt1: false
	print("lt1: ");
	printBool(lt1);
	let lt2 = b < a;
	// CHECK: lt2: true
	print("lt2: ");
	printBool(lt2);

	let gt1 = a > b;
	// CHECK: gt1: true
	print("gt1: ");
	printBool(gt1);
	let gt2 = b > a;
	// CHECK: gt2: false
	print("gt2: ");
	printBool(gt2);

	let le1 = a <= b;
	// CHECK: le1: false
	print("le1: ");
	printBool(le1);
	let le2 = b <= a;
	// CHECK: le2: true
	print("le2: ");
	printBool(le2);
	let le3 = a <= a;
	// CHECK: le3: true
	print("le3: ");
	printBool(le3);

	let ge1 = a >= b;
	// CHECK: ge1: true
	print("ge1: ");
	printBool(ge1);
	let ge2 = b >= a;
	// CHECK: ge2: false
	print("ge2: ");
	printBool(ge2);
	let ge3 = a >= a;
	// CHECK: ge3: true
	print("ge3: ");
	printBool(ge3);

	let and = a & b;
	// CHECK: and: 0
	print("and: ");
	printInt(and);

	let or = a | b;
	// CHECK: or: 5
	print("or: ");
	printInt(or);

	let xor = a ^ b;
	// CHECK: xor: 5
	print("xor: ");
	printInt(xor);

	let shl = a << b;
	// CHECK: shl: 8
	print("shl: ");
	printInt(shl);

	let shr = a >> b;
	// CHECK: shr: 2
	print("shr: ");
	printInt(shr);

	let compl = -~a;
	// CHECK: compl: 5
	print("compl: ");
	printInt(compl);

	let noop = +a;
	// CHECK: noop: 4
	print("noop: ");
	printInt(noop);
    return 0;
}
